
Manipulator_code1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036fc  080036fc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080036fc  080036fc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036fc  080036fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003704  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003710  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003710  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c641  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d39  00000000  00000000  00011676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000133b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099c  00000000  00000000  00013ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fa3  00000000  00000000  0001498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db3d  00000000  00000000  0002b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cdb  00000000  00000000  0003946c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000c018c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c34ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036b8 	.word	0x080036b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080036b8 	.word	0x080036b8

0800014c <InitServos>:

#include "Servo.h"

//ХУЙНЯ, ПЕРЕДЕЛАТЬ!!!
void InitServos(Servo *servo1, Servo *servo2, TIM_HandleTypeDef *htim_pwm, TIM_HandleTypeDef *htim_fb)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	servo1->tim_pwm = htim_pwm;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	687a      	ldr	r2, [r7, #4]
 800015e:	60da      	str	r2, [r3, #12]
	servo2->tim_pwm = htim_pwm;
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	60da      	str	r2, [r3, #12]
	servo1->tim_fb = htim_fb;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	683a      	ldr	r2, [r7, #0]
 800016a:	611a      	str	r2, [r3, #16]
	servo2->tim_fb = htim_fb;
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	611a      	str	r2, [r3, #16]

	servo1->tim_channel_pwm = SERVO1_PWM_TIM_CHANNEL;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	2200      	movs	r2, #0
 8000176:	829a      	strh	r2, [r3, #20]
	servo2->tim_channel_pwm = SERVO2_PWM_TIM_CHANNEL;
 8000178:	68bb      	ldr	r3, [r7, #8]
 800017a:	2204      	movs	r2, #4
 800017c:	829a      	strh	r2, [r3, #20]

	servo1->tim_channel_fb = SERVO1_FB_TIM_CHANNEL;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	2208      	movs	r2, #8
 8000182:	82da      	strh	r2, [r3, #22]
	servo2->tim_channel_fb = SERVO2_FB_TIM_CHANNEL;
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	220c      	movs	r2, #12
 8000188:	82da      	strh	r2, [r3, #22]

	servo1->GPIOx = SRV1_FB_GPIO_Port;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <InitServos+0x60>)
 800018e:	619a      	str	r2, [r3, #24]
	servo2->GPIOx = SRV2_FB_GPIO_Port;
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	4a06      	ldr	r2, [pc, #24]	@ (80001ac <InitServos+0x60>)
 8000194:	619a      	str	r2, [r3, #24]
	servo1->GPIO_Pin = SRV1_DIR_Pin;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	2210      	movs	r2, #16
 800019a:	61da      	str	r2, [r3, #28]
	servo2->GPIO_Pin = SRV2_DIR_Pin;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	2220      	movs	r2, #32
 80001a0:	61da      	str	r2, [r3, #28]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40010800 	.word	0x40010800

080001b0 <SetDirection>:

void SetDirection(Servo *srv)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(srv->dir == 1)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	791b      	ldrb	r3, [r3, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d108      	bne.n	80001d2 <SetDirection+0x22>
	{
		HAL_GPIO_WritePin(srv->GPIOx, srv->GPIO_Pin, SET);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	6998      	ldr	r0, [r3, #24]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	69db      	ldr	r3, [r3, #28]
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	2201      	movs	r2, #1
 80001cc:	4619      	mov	r1, r3
 80001ce:	f001 f851 	bl	8001274 <HAL_GPIO_WritePin>
	}
	if(srv->dir == -1)
	{
		HAL_GPIO_WritePin(srv->GPIOx, srv->GPIO_Pin, RESET);
	}
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <SetSpeed>:
void SetSpeed(Servo *srv)
{
 80001da:	b480      	push	{r7}
 80001dc:	b083      	sub	sp, #12
 80001de:	af00      	add	r7, sp, #0
 80001e0:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, srv->speed);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	8a9b      	ldrh	r3, [r3, #20]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d106      	bne.n	80001f8 <SetSpeed+0x1e>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	885a      	ldrh	r2, [r3, #2]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001f6:	e01e      	b.n	8000236 <SetSpeed+0x5c>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, srv->speed);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	8a9b      	ldrh	r3, [r3, #20]
 80001fc:	2b04      	cmp	r3, #4
 80001fe:	d107      	bne.n	8000210 <SetSpeed+0x36>
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	8859      	ldrh	r1, [r3, #2]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	460b      	mov	r3, r1
 800020c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800020e:	e012      	b.n	8000236 <SetSpeed+0x5c>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, srv->speed);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	8a9b      	ldrh	r3, [r3, #20]
 8000214:	2b08      	cmp	r3, #8
 8000216:	d107      	bne.n	8000228 <SetSpeed+0x4e>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	8859      	ldrh	r1, [r3, #2]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	460b      	mov	r3, r1
 8000224:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000226:	e006      	b.n	8000236 <SetSpeed+0x5c>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, srv->speed);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	8859      	ldrh	r1, [r3, #2]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	460b      	mov	r3, r1
 8000234:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <ResetSpeed>:
void ResetSpeed(Servo *srv)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, TIM_PWM_COUNTER);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	8a9b      	ldrh	r3, [r3, #20]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d106      	bne.n	800025e <ResetSpeed+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f240 128f 	movw	r2, #399	@ 0x18f
 800025a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800025c:	e01b      	b.n	8000296 <ResetSpeed+0x56>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, TIM_PWM_COUNTER);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	8a9b      	ldrh	r3, [r3, #20]
 8000262:	2b04      	cmp	r3, #4
 8000264:	d106      	bne.n	8000274 <ResetSpeed+0x34>
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	f240 138f 	movw	r3, #399	@ 0x18f
 8000270:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000272:	e010      	b.n	8000296 <ResetSpeed+0x56>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, TIM_PWM_COUNTER);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	8a9b      	ldrh	r3, [r3, #20]
 8000278:	2b08      	cmp	r3, #8
 800027a:	d106      	bne.n	800028a <ResetSpeed+0x4a>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f240 138f 	movw	r3, #399	@ 0x18f
 8000286:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000288:	e005      	b.n	8000296 <ResetSpeed+0x56>
	__HAL_TIM_SET_COMPARE(srv->tim_pwm, srv->tim_channel_pwm, TIM_PWM_COUNTER);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	f240 138f 	movw	r3, #399	@ 0x18f
 8000294:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <Rotate>:

void Rotate(Servo *srv)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	SetDirection(srv);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f7ff ff81 	bl	80001b0 <SetDirection>
	SetSpeed(srv);
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff93 	bl	80001da <SetSpeed>
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <RotateByAngle>:

void RotateByAngle(Servo *srv)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	SetDirection(srv);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff73 	bl	80001b0 <SetDirection>
	SetSpeed(srv);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ff85 	bl	80001da <SetSpeed>
	while(srv->fb_angle < srv->angle) HAL_Delay(10);
 80002d0:	e002      	b.n	80002d8 <RotateByAngle+0x1c>
 80002d2:	200a      	movs	r0, #10
 80002d4:	f000 fc66 	bl	8000ba4 <HAL_Delay>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	88da      	ldrh	r2, [r3, #6]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d3f6      	bcc.n	80002d2 <RotateByAngle+0x16>
	ResetSpeed(srv);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ffab 	bl	8000240 <ResetSpeed>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 fbf2 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f844 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f96a 	bl	80005d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000304:	f000 f8da 	bl	80004bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000308:	f000 f93c 	bl	8000584 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800030c:	f000 f878 	bl	8000400 <MX_TIM2_Init>
  InitServos(&servo1, &servo2, &htim3, &htim2);
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <main+0x84>)
 8000312:	4a1a      	ldr	r2, [pc, #104]	@ (800037c <main+0x88>)
 8000314:	491a      	ldr	r1, [pc, #104]	@ (8000380 <main+0x8c>)
 8000316:	481b      	ldr	r0, [pc, #108]	@ (8000384 <main+0x90>)
 8000318:	f7ff ff18 	bl	800014c <InitServos>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800031c:	2100      	movs	r1, #0
 800031e:	4817      	ldr	r0, [pc, #92]	@ (800037c <main+0x88>)
 8000320:	f001 fc20 	bl	8001b64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000324:	2104      	movs	r1, #4
 8000326:	4815      	ldr	r0, [pc, #84]	@ (800037c <main+0x88>)
 8000328:	f001 fc1c 	bl	8001b64 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800032c:	2108      	movs	r1, #8
 800032e:	4812      	ldr	r0, [pc, #72]	@ (8000378 <main+0x84>)
 8000330:	f001 fd0a 	bl	8001d48 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000334:	210c      	movs	r1, #12
 8000336:	4810      	ldr	r0, [pc, #64]	@ (8000378 <main+0x84>)
 8000338:	f001 fd06 	bl	8001d48 <HAL_TIM_IC_Start_IT>
  servo2.dir = 1;
 800033c:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <main+0x8c>)
 800033e:	2201      	movs	r2, #1
 8000340:	711a      	strb	r2, [r3, #4]
  	  servo2.speed = 0;
 8000342:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <main+0x8c>)
 8000344:	2200      	movs	r2, #0
 8000346:	805a      	strh	r2, [r3, #2]
  	  servo2.angle = 500;
 8000348:	4b0d      	ldr	r3, [pc, #52]	@ (8000380 <main+0x8c>)
 800034a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800034e:	801a      	strh	r2, [r3, #0]
  	  RotateByAngle(&servo2);
 8000350:	480b      	ldr	r0, [pc, #44]	@ (8000380 <main+0x8c>)
 8000352:	f7ff ffb3 	bl	80002bc <RotateByAngle>
	  	  	  HAL_Delay(100);

	  	  	  setPWM(399);

	  	  	  */
	  servo1.dir = 1;
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <main+0x90>)
 8000358:	2201      	movs	r2, #1
 800035a:	711a      	strb	r2, [r3, #4]
	  servo1.speed = 399;
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <main+0x90>)
 800035e:	f240 128f 	movw	r2, #399	@ 0x18f
 8000362:	805a      	strh	r2, [r3, #2]
	  servo1.angle = 1000;
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <main+0x90>)
 8000366:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800036a:	801a      	strh	r2, [r3, #0]
	  Rotate(&servo1);
 800036c:	4805      	ldr	r0, [pc, #20]	@ (8000384 <main+0x90>)
 800036e:	f7ff ff97 	bl	80002a0 <Rotate>
	  servo1.dir = 1;
 8000372:	bf00      	nop
 8000374:	e7ef      	b.n	8000356 <main+0x62>
 8000376:	bf00      	nop
 8000378:	20000028 	.word	0x20000028
 800037c:	20000070 	.word	0x20000070
 8000380:	20000128 	.word	0x20000128
 8000384:	20000108 	.word	0x20000108

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b090      	sub	sp, #64	@ 0x40
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2228      	movs	r2, #40	@ 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f003 f962 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 ff71 	bl	80012a4 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x44>
  {
    Error_Handler();
 80003c8:	f000 f9fe 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 f9de 	bl	80017a8 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f9e9 	bl	80007c8 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	@ 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000410:	463b      	mov	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800041c:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 800041e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 8000426:	2264      	movs	r2, #100	@ 0x64
 8000428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042a:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 8000432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000444:	481c      	ldr	r0, [pc, #112]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 8000446:	f001 fc2f 	bl	8001ca8 <HAL_TIM_IC_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000450:	f000 f9ba 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4815      	ldr	r0, [pc, #84]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 8000464:	f002 fb5a 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800046e:	f000 f9ab 	bl	80007c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000472:	2300      	movs	r3, #0
 8000474:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000476:	2301      	movs	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	2208      	movs	r2, #8
 8000486:	4619      	mov	r1, r3
 8000488:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 800048a:	f001 fe59 	bl	8002140 <HAL_TIM_IC_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000494:	f000 f998 	bl	80007c8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	220c      	movs	r2, #12
 800049c:	4619      	mov	r1, r3
 800049e:	4806      	ldr	r0, [pc, #24]	@ (80004b8 <MX_TIM2_Init+0xb8>)
 80004a0:	f001 fe4e 	bl	8002140 <HAL_TIM_IC_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80004aa:	f000 f98d 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000028 	.word	0x20000028

080004bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	@ 0x28
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c2:	f107 0320 	add.w	r3, r7, #32
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004de:	4b27      	ldr	r3, [pc, #156]	@ (800057c <MX_TIM3_Init+0xc0>)
 80004e0:	4a27      	ldr	r2, [pc, #156]	@ (8000580 <MX_TIM3_Init+0xc4>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004e4:	4b25      	ldr	r3, [pc, #148]	@ (800057c <MX_TIM3_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b24      	ldr	r3, [pc, #144]	@ (800057c <MX_TIM3_Init+0xc0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 80004f0:	4b22      	ldr	r3, [pc, #136]	@ (800057c <MX_TIM3_Init+0xc0>)
 80004f2:	f240 128f 	movw	r2, #399	@ 0x18f
 80004f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b20      	ldr	r3, [pc, #128]	@ (800057c <MX_TIM3_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <MX_TIM3_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000504:	481d      	ldr	r0, [pc, #116]	@ (800057c <MX_TIM3_Init+0xc0>)
 8000506:	f001 fadd 	bl	8001ac4 <HAL_TIM_PWM_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000510:	f000 f95a 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800051c:	f107 0320 	add.w	r3, r7, #32
 8000520:	4619      	mov	r1, r3
 8000522:	4816      	ldr	r0, [pc, #88]	@ (800057c <MX_TIM3_Init+0xc0>)
 8000524:	f002 fafa 	bl	8002b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800052e:	f000 f94b 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000532:	2360      	movs	r3, #96	@ 0x60
 8000534:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <MX_TIM3_Init+0xc0>)
 800054a:	f001 fe95 	bl	8002278 <HAL_TIM_PWM_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000554:	f000 f938 	bl	80007c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2204      	movs	r2, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4807      	ldr	r0, [pc, #28]	@ (800057c <MX_TIM3_Init+0xc0>)
 8000560:	f001 fe8a 	bl	8002278 <HAL_TIM_PWM_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 f92d 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800056e:	4803      	ldr	r0, [pc, #12]	@ (800057c <MX_TIM3_Init+0xc0>)
 8000570:	f000 f9c4 	bl	80008fc <HAL_TIM_MspPostInit>

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	@ 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000070 	.word	0x20000070
 8000580:	40000400 	.word	0x40000400

08000584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <MX_USART1_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <MX_USART1_UART_Init+0x4c>)
 80005bc:	f002 fb1e 	bl	8002bfc <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f000 f8ff 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000b8 	.word	0x200000b8
 80005d4:	40013800 	.word	0x40013800

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 80005f2:	f043 0320 	orr.w	r3, r3, #32
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0320 	and.w	r3, r3, #32
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0xd0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRV1_DIR_Pin|SRV2_DIR_Pin|RS485_DIR_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800063a:	481c      	ldr	r0, [pc, #112]	@ (80006ac <MX_GPIO_Init+0xd4>)
 800063c:	f000 fe1a 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_OK_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000646:	481a      	ldr	r0, [pc, #104]	@ (80006b0 <MX_GPIO_Init+0xd8>)
 8000648:	f000 fe14 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SRV1_DIR_Pin SRV2_DIR_Pin RS485_DIR_Pin */
  GPIO_InitStruct.Pin = SRV1_DIR_Pin|SRV2_DIR_Pin|RS485_DIR_Pin;
 800064c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4811      	ldr	r0, [pc, #68]	@ (80006ac <MX_GPIO_Init+0xd4>)
 8000666:	f000 fc81 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0xd8>)
 800067e:	f000 fc75 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_OK_Pin LED_ERROR_Pin */
  GPIO_InitStruct.Pin = LED_OK_Pin|LED_ERROR_Pin;
 8000682:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_GPIO_Init+0xd8>)
 800069c:	f000 fc66 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <HAL_TIM_IC_CaptureCallback>:

//перетащить внутрянку в отдельную функцию
//сделать обработку от шумов
//подумать как лучше условие на servo->dir или += servo->dir;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006c4:	d16f      	bne.n	80007a6 <HAL_TIM_IC_CaptureCallback+0xf2>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7f1b      	ldrb	r3, [r3, #28]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d133      	bne.n	8000736 <HAL_TIM_IC_CaptureCallback+0x82>
        {
        	servo1.fb_angle += servo1.dir;
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006d0:	88db      	ldrh	r3, [r3, #6]
 80006d2:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006d4:	7912      	ldrb	r2, [r2, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006dc:	80da      	strh	r2, [r3, #6]

        	captured_value =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4834      	ldr	r0, [pc, #208]	@ (80007b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80006e2:	f001 fe8b 	bl	80023fc <HAL_TIM_ReadCapturedValue>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006ec:	801a      	strh	r2, [r3, #0]

        	if(captured_value > tim_buf1)
 80006ee:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <HAL_TIM_IC_CaptureCallback+0x108>)
 80006f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	dd0a      	ble.n	8000714 <HAL_TIM_IC_CaptureCallback+0x60>
        	{
        		servo1.fb_speed = captured_value - tim_buf1;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000700:	881a      	ldrh	r2, [r3, #0]
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8000704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000708:	b29b      	uxth	r3, r3
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000710:	811a      	strh	r2, [r3, #8]
 8000712:	e00b      	b.n	800072c <HAL_TIM_IC_CaptureCallback+0x78>
        	}
        	else
        	{
        		servo1.fb_speed = TIM_FB_PERIOD - tim_buf1 + captured_value;
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000716:	881a      	ldrh	r2, [r3, #0]
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <HAL_TIM_IC_CaptureCallback+0x108>)
 800071a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800071e:	b29b      	uxth	r3, r3
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	b29b      	uxth	r3, r3
 8000724:	3b01      	subs	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800072a:	811a      	strh	r2, [r3, #8]
        	}
        	tim_buf1 = captured_value;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	b21a      	sxth	r2, r3
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <HAL_TIM_IC_CaptureCallback+0x108>)
 8000734:	801a      	strh	r2, [r3, #0]
        }
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7f1b      	ldrb	r3, [r3, #28]
 800073a:	2b08      	cmp	r3, #8
 800073c:	d133      	bne.n	80007a6 <HAL_TIM_IC_CaptureCallback+0xf2>
        {
        	servo2.fb_angle += servo2.dir;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000744:	7912      	ldrb	r2, [r2, #4]
 8000746:	4413      	add	r3, r2
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800074c:	80da      	strh	r2, [r3, #6]

        	captured_value =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);
 800074e:	210c      	movs	r1, #12
 8000750:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000752:	f001 fe53 	bl	80023fc <HAL_TIM_ReadCapturedValue>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800075c:	801a      	strh	r2, [r3, #0]

        	if(captured_value > tim_buf2)
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076a:	429a      	cmp	r2, r3
 800076c:	dd0a      	ble.n	8000784 <HAL_TIM_IC_CaptureCallback+0xd0>
        	{
        		servo2.fb_speed = captured_value - tim_buf2;
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000778:	b29b      	uxth	r3, r3
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000780:	811a      	strh	r2, [r3, #8]
 8000782:	e00b      	b.n	800079c <HAL_TIM_IC_CaptureCallback+0xe8>
        	}
        	else
        	{
        		servo2.fb_speed = TIM_FB_PERIOD - tim_buf2 + captured_value;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <HAL_TIM_IC_CaptureCallback+0x110>)
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	b29b      	uxth	r3, r3
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	b29b      	uxth	r3, r3
 8000794:	3b01      	subs	r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800079a:	811a      	strh	r2, [r3, #8]
        	}
        	tim_buf2 = captured_value;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_TIM_IC_CaptureCallback+0x104>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_TIM_IC_CaptureCallback+0x110>)
 80007a4:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000108 	.word	0x20000108
 80007b4:	20000028 	.word	0x20000028
 80007b8:	20000104 	.word	0x20000104
 80007bc:	20000100 	.word	0x20000100
 80007c0:	20000128 	.word	0x20000128
 80007c4:	20000102 	.word	0x20000102

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000856:	d12b      	bne.n	80008b0 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_TIM_IC_MspInit+0x80>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SRV1_FB_Pin|SRV2_FB_Pin;
 8000888:	230c      	movs	r3, #12
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <HAL_TIM_IC_MspInit+0x84>)
 800089c:	f000 fb66 	bl	8000f6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	201c      	movs	r0, #28
 80008a6:	f000 fa78 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008aa:	201c      	movs	r0, #28
 80008ac:	f000 fa91 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800

080008c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a09      	ldr	r2, [pc, #36]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x34>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10b      	bne.n	80008ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_TIM_PWM_MspInit+0x38>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_TIM_PWM_MspInit+0x38>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_TIM_PWM_MspInit+0x38>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40000400 	.word	0x40000400
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <HAL_TIM_MspPostInit+0x58>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d117      	bne.n	800094c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_TIM_MspPostInit+0x5c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <HAL_TIM_MspPostInit+0x5c>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <HAL_TIM_MspPostInit+0x5c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SRV1_PWM_Pin|SRV2_PWM_Pin;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <HAL_TIM_MspPostInit+0x60>)
 8000948:	f000 fb10 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40000400 	.word	0x40000400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a20      	ldr	r2, [pc, #128]	@ (80009fc <HAL_UART_MspInit+0x9c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d139      	bne.n	80009f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a1e      	ldr	r2, [pc, #120]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <HAL_UART_MspInit+0xa0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 80009b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <HAL_UART_MspInit+0xa4>)
 80009c6:	f000 fad1 	bl	8000f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80009ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <HAL_UART_MspInit+0xa4>)
 80009e0:	f000 fac4 	bl	8000f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2025      	movs	r0, #37	@ 0x25
 80009ea:	f000 f9d6 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ee:	2025      	movs	r0, #37	@ 0x25
 80009f0:	f000 f9ef 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f888 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <TIM2_IRQHandler+0x10>)
 8000a66:	f001 fa7b 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000028 	.word	0x20000028

08000a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <USART1_IRQHandler+0x10>)
 8000a7a:	f002 f90f 	bl	8002c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000b8 	.word	0x200000b8

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a94:	f7ff fff8 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a9a:	490c      	ldr	r1, [pc, #48]	@ (8000acc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab0:	4c09      	ldr	r4, [pc, #36]	@ (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 fdd7 	bl	8003670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fc17 	bl	80002f4 <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad0:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad8:	2000014c 	.word	0x2000014c

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x28>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f947 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe6a 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f95f 	bl	8000dee <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f927 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a03      	ldr	r2, [pc, #12]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000148 	.word	0x20000148

08000b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	@ (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000148 	.word	0x20000148

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff fff0 	bl	8000b90 <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffe0 	bl	8000b90 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	@ (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff90 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff2d 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff42 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff35 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d008      	beq.n	8000e30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2204      	movs	r2, #4
 8000e22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e020      	b.n	8000e72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020e 	bic.w	r2, r2, #14
 8000e3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d005      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2204      	movs	r2, #4
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e051      	b.n	8000f44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 020e 	bic.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <HAL_DMA_Abort_IT+0xd4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d029      	beq.n	8000f1e <HAL_DMA_Abort_IT+0xa2>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_DMA_Abort_IT+0xd8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d022      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x9e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <HAL_DMA_Abort_IT+0xdc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01a      	beq.n	8000f14 <HAL_DMA_Abort_IT+0x98>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f5c <HAL_DMA_Abort_IT+0xe0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d012      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x92>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_DMA_Abort_IT+0xe4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00a      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x8c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <HAL_DMA_Abort_IT+0xe8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d102      	bne.n	8000f02 <HAL_DMA_Abort_IT+0x86>
 8000efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f00:	e00e      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f06:	e00b      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0c:	e008      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	e005      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f18:	e002      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	e000      	b.n	8000f20 <HAL_DMA_Abort_IT+0xa4>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_DMA_Abort_IT+0xec>)
 8000f22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
    } 
  }
  return status;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020008 	.word	0x40020008
 8000f54:	4002001c 	.word	0x4002001c
 8000f58:	40020030 	.word	0x40020030
 8000f5c:	40020044 	.word	0x40020044
 8000f60:	40020058 	.word	0x40020058
 8000f64:	4002006c 	.word	0x4002006c
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b08b      	sub	sp, #44	@ 0x2c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e169      	b.n	8001254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f80:	2201      	movs	r2, #1
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8158 	bne.w	800124e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4a9a      	ldr	r2, [pc, #616]	@ (800120c <HAL_GPIO_Init+0x2a0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d05e      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a98      	ldr	r2, [pc, #608]	@ (800120c <HAL_GPIO_Init+0x2a0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d875      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fae:	4a98      	ldr	r2, [pc, #608]	@ (8001210 <HAL_GPIO_Init+0x2a4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d058      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a96      	ldr	r2, [pc, #600]	@ (8001210 <HAL_GPIO_Init+0x2a4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d86f      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fba:	4a96      	ldr	r2, [pc, #600]	@ (8001214 <HAL_GPIO_Init+0x2a8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d052      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fc0:	4a94      	ldr	r2, [pc, #592]	@ (8001214 <HAL_GPIO_Init+0x2a8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d869      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fc6:	4a94      	ldr	r2, [pc, #592]	@ (8001218 <HAL_GPIO_Init+0x2ac>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d04c      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fcc:	4a92      	ldr	r2, [pc, #584]	@ (8001218 <HAL_GPIO_Init+0x2ac>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d863      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fd2:	4a92      	ldr	r2, [pc, #584]	@ (800121c <HAL_GPIO_Init+0x2b0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d046      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a90      	ldr	r2, [pc, #576]	@ (800121c <HAL_GPIO_Init+0x2b0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d85d      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d82a      	bhi.n	8001038 <HAL_GPIO_Init+0xcc>
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d859      	bhi.n	800109a <HAL_GPIO_Init+0x12e>
 8000fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <HAL_GPIO_Init+0x80>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	08001067 	.word	0x08001067
 8000ff0:	08001041 	.word	0x08001041
 8000ff4:	08001053 	.word	0x08001053
 8000ff8:	08001095 	.word	0x08001095
 8000ffc:	0800109b 	.word	0x0800109b
 8001000:	0800109b 	.word	0x0800109b
 8001004:	0800109b 	.word	0x0800109b
 8001008:	0800109b 	.word	0x0800109b
 800100c:	0800109b 	.word	0x0800109b
 8001010:	0800109b 	.word	0x0800109b
 8001014:	0800109b 	.word	0x0800109b
 8001018:	0800109b 	.word	0x0800109b
 800101c:	0800109b 	.word	0x0800109b
 8001020:	0800109b 	.word	0x0800109b
 8001024:	0800109b 	.word	0x0800109b
 8001028:	0800109b 	.word	0x0800109b
 800102c:	0800109b 	.word	0x0800109b
 8001030:	08001049 	.word	0x08001049
 8001034:	0800105d 	.word	0x0800105d
 8001038:	4a79      	ldr	r2, [pc, #484]	@ (8001220 <HAL_GPIO_Init+0x2b4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103e:	e02c      	b.n	800109a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	623b      	str	r3, [r7, #32]
          break;
 8001046:	e029      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	3304      	adds	r3, #4
 800104e:	623b      	str	r3, [r7, #32]
          break;
 8001050:	e024      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	3308      	adds	r3, #8
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e01f      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	330c      	adds	r3, #12
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e01a      	b.n	800109c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106e:	2304      	movs	r3, #4
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e013      	b.n	800109c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d105      	bne.n	8001088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	611a      	str	r2, [r3, #16]
          break;
 8001086:	e009      	b.n	800109c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	615a      	str	r2, [r3, #20]
          break;
 8001092:	e003      	b.n	800109c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x130>
          break;
 800109a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2bff      	cmp	r3, #255	@ 0xff
 80010a0:	d801      	bhi.n	80010a6 <HAL_GPIO_Init+0x13a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_Init+0x13e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3304      	adds	r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2bff      	cmp	r3, #255	@ 0xff
 80010b0:	d802      	bhi.n	80010b8 <HAL_GPIO_Init+0x14c>
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x152>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	3b08      	subs	r3, #8
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	210f      	movs	r1, #15
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	6a39      	ldr	r1, [r7, #32]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	431a      	orrs	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80b1 	beq.w	800124e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x2b8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x2b8>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001224 <HAL_GPIO_Init+0x2b8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001104:	4a48      	ldr	r2, [pc, #288]	@ (8001228 <HAL_GPIO_Init+0x2bc>)
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a40      	ldr	r2, [pc, #256]	@ (800122c <HAL_GPIO_Init+0x2c0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d013      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3f      	ldr	r2, [pc, #252]	@ (8001230 <HAL_GPIO_Init+0x2c4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d00d      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3e      	ldr	r2, [pc, #248]	@ (8001234 <HAL_GPIO_Init+0x2c8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a3d      	ldr	r2, [pc, #244]	@ (8001238 <HAL_GPIO_Init+0x2cc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_GPIO_Init+0x1e0>
 8001148:	2303      	movs	r3, #3
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 800114c:	2304      	movs	r3, #4
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001158:	2300      	movs	r3, #0
 800115a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800116a:	492f      	ldr	r1, [pc, #188]	@ (8001228 <HAL_GPIO_Init+0x2bc>)
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d006      	beq.n	8001192 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001184:	4b2d      	ldr	r3, [pc, #180]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	492c      	ldr	r1, [pc, #176]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	43db      	mvns	r3, r3
 800119a:	4928      	ldr	r1, [pc, #160]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 800119c:	4013      	ands	r3, r2
 800119e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	4922      	ldr	r1, [pc, #136]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60cb      	str	r3, [r1, #12]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	491e      	ldr	r1, [pc, #120]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4918      	ldr	r1, [pc, #96]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4914      	ldr	r1, [pc, #80]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d021      	beq.n	8001240 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	490e      	ldr	r1, [pc, #56]	@ (800123c <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]
 8001208:	e021      	b.n	800124e <HAL_GPIO_Init+0x2e2>
 800120a:	bf00      	nop
 800120c:	10320000 	.word	0x10320000
 8001210:	10310000 	.word	0x10310000
 8001214:	10220000 	.word	0x10220000
 8001218:	10210000 	.word	0x10210000
 800121c:	10120000 	.word	0x10120000
 8001220:	10110000 	.word	0x10110000
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40011000 	.word	0x40011000
 8001238:	40011400 	.word	0x40011400
 800123c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_GPIO_Init+0x304>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	43db      	mvns	r3, r3
 8001248:	4909      	ldr	r1, [pc, #36]	@ (8001270 <HAL_GPIO_Init+0x304>)
 800124a:	4013      	ands	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	f47f ae8e 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	372c      	adds	r7, #44	@ 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e272      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8087 	beq.w	80013d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c4:	4b92      	ldr	r3, [pc, #584]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d00c      	beq.n	80012ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d112      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
 80012dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e8:	d10b      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4b89      	ldr	r3, [pc, #548]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d06c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x12c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d168      	bne.n	80013d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e24c      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x76>
 800130c:	4b80      	ldr	r3, [pc, #512]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a7f      	ldr	r2, [pc, #508]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e02e      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b7b      	ldr	r3, [pc, #492]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7a      	ldr	r2, [pc, #488]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b78      	ldr	r3, [pc, #480]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a77      	ldr	r2, [pc, #476]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0xbc>
 8001346:	4b72      	ldr	r3, [pc, #456]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a71      	ldr	r2, [pc, #452]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6e      	ldr	r2, [pc, #440]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 8001360:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6a      	ldr	r2, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b68      	ldr	r3, [pc, #416]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a67      	ldr	r2, [pc, #412]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc06 	bl	8000b90 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc02 	bl	8000b90 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	@ 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e200      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xe4>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fbf2 	bl	8000b90 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fbee 	bl	8000b90 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1ec      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x10c>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013de:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
 80013f6:	4b46      	ldr	r3, [pc, #280]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c0      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4939      	ldr	r1, [pc, #228]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fba7 	bl	8000b90 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fba3 	bl	8000b90 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a1      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4927      	ldr	r1, [pc, #156]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb86 	bl	8000b90 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fb82 	bl	8000b90 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e180      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03a      	beq.n	8001528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d019      	beq.n	80014ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <HAL_RCC_OscConfig+0x274>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fb66 	bl	8000b90 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb62 	bl	8000b90 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e160      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 face 	bl	8001a88 <RCC_Delay>
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_RCC_OscConfig+0x274>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fb4c 	bl	8000b90 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fa:	e00f      	b.n	800151c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb48 	bl	8000b90 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d908      	bls.n	800151c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e146      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	42420000 	.word	0x42420000
 8001518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b92      	ldr	r3, [pc, #584]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e9      	bne.n	80014fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a6 	beq.w	8001682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b8b      	ldr	r3, [pc, #556]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a87      	ldr	r2, [pc, #540]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b85      	ldr	r3, [pc, #532]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b82      	ldr	r3, [pc, #520]	@ (800176c <HAL_RCC_OscConfig+0x4c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_RCC_OscConfig+0x4c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7e      	ldr	r2, [pc, #504]	@ (800176c <HAL_RCC_OscConfig+0x4c8>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb09 	bl	8000b90 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff fb05 	bl	8000b90 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	@ 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e103      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b75      	ldr	r3, [pc, #468]	@ (800176c <HAL_RCC_OscConfig+0x4c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 80015a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e02d      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015be:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a69      	ldr	r2, [pc, #420]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b67      	ldr	r3, [pc, #412]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a66      	ldr	r2, [pc, #408]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x356>
 80015e0:	4b61      	ldr	r3, [pc, #388]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a60      	ldr	r2, [pc, #384]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b58      	ldr	r3, [pc, #352]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a57      	ldr	r2, [pc, #348]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fab9 	bl	8000b90 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff fab5 	bl	8000b90 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0b1      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b4b      	ldr	r3, [pc, #300]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x37e>
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff faa3 	bl	8000b90 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fa9f 	bl	8000b90 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e09b      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001676:	4b3c      	ldr	r3, [pc, #240]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a3b      	ldr	r2, [pc, #236]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8087 	beq.w	800179a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168c:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d061      	beq.n	800175c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d146      	bne.n	800172e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fa73 	bl	8000b90 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fa6f 	bl	8000b90 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e06d      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d4:	d108      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d6:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4921      	ldr	r1, [pc, #132]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a19      	ldr	r1, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	430b      	orrs	r3, r1
 80016fa:	491b      	ldr	r1, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa43 	bl	8000b90 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fa3f 	bl	8000b90 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x46a>
 800172c:	e035      	b.n	800179a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_RCC_OscConfig+0x4cc>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fa2c 	bl	8000b90 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fa28 	bl	8000b90 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e026      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x498>
 800175a:	e01e      	b.n	800179a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e019      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
 8001768:	40021000 	.word	0x40021000
 800176c:	40007000 	.word	0x40007000
 8001770:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_RCC_OscConfig+0x500>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	429a      	cmp	r2, r3
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0d0      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d910      	bls.n	80017ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 0207 	bic.w	r2, r3, #7
 80017d2:	4965      	ldr	r1, [pc, #404]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a58      	ldr	r2, [pc, #352]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800180e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001826:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d040      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e073      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06b      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4936      	ldr	r1, [pc, #216]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff f97a 	bl	8000b90 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff f976 	bl	8000b90 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e053      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d210      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4922      	ldr	r1, [pc, #136]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4602      	mov	r2, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	490a      	ldr	r1, [pc, #40]	@ (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1cc>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8d8 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
 8001970:	080036d0 	.word	0x080036d0
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x30>
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x36>
 80019aa:	e027      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ae:	613b      	str	r3, [r7, #16]
      break;
 80019b0:	e027      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d010      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x94>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0c5b      	lsrs	r3, r3, #17
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	4a11      	ldr	r2, [pc, #68]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80019de:	fb03 f202 	mul.w	r2, r3, r2
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e004      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	613b      	str	r3, [r7, #16]
      break;
 80019fa:	e002      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	613b      	str	r3, [r7, #16]
      break;
 8001a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a02:	693b      	ldr	r3, [r7, #16]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	007a1200 	.word	0x007a1200
 8001a18:	080036e8 	.word	0x080036e8
 8001a1c:	080036f8 	.word	0x080036f8
 8001a20:	003d0900 	.word	0x003d0900

08001a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b02      	ldr	r3, [pc, #8]	@ (8001a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff2 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	080036e0 	.word	0x080036e0

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	0adb      	lsrs	r3, r3, #11
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	@ (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	080036e0 	.word	0x080036e0

08001a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <RCC_Delay+0x34>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <RCC_Delay+0x38>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a5b      	lsrs	r3, r3, #9
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa4:	bf00      	nop
  }
  while (Delay --);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	60fa      	str	r2, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f9      	bne.n	8001aa4 <RCC_Delay+0x1c>
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	10624dd3 	.word	0x10624dd3

08001ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fee8 	bl	80008c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 fce2 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_TIM_PWM_Start+0x24>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e022      	b.n	8001bce <HAL_TIM_PWM_Start+0x6a>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d109      	bne.n	8001ba2 <HAL_TIM_PWM_Start+0x3e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	e015      	b.n	8001bce <HAL_TIM_PWM_Start+0x6a>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d109      	bne.n	8001bbc <HAL_TIM_PWM_Start+0x58>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e008      	b.n	8001bce <HAL_TIM_PWM_Start+0x6a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e05e      	b.n	8001c94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d104      	bne.n	8001be6 <HAL_TIM_PWM_Start+0x82>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001be4:	e013      	b.n	8001c0e <HAL_TIM_PWM_Start+0xaa>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0x92>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf4:	e00b      	b.n	8001c0e <HAL_TIM_PWM_Start+0xaa>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d104      	bne.n	8001c06 <HAL_TIM_PWM_Start+0xa2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c04:	e003      	b.n	8001c0e <HAL_TIM_PWM_Start+0xaa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 ff5b 	bl	8002ad2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_TIM_PWM_Start+0x138>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d107      	bne.n	8001c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a18      	ldr	r2, [pc, #96]	@ (8001c9c <HAL_TIM_PWM_Start+0x138>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <HAL_TIM_PWM_Start+0xfa>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c48:	d009      	beq.n	8001c5e <HAL_TIM_PWM_Start+0xfa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <HAL_TIM_PWM_Start+0x13c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_TIM_PWM_Start+0xfa>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <HAL_TIM_PWM_Start+0x140>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d111      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b06      	cmp	r3, #6
 8001c6e:	d010      	beq.n	8001c92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c80:	e007      	b.n	8001c92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fdb2 	bl	8000838 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fbf0 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_IC_Start_IT+0x1e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e013      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x46>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d104      	bne.n	8001d76 <HAL_TIM_IC_Start_IT+0x2e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e00b      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x46>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d104      	bne.n	8001d86 <HAL_TIM_IC_Start_IT+0x3e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e003      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x46>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <HAL_TIM_IC_Start_IT+0x58>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e013      	b.n	8001dc8 <HAL_TIM_IC_Start_IT+0x80>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d104      	bne.n	8001db0 <HAL_TIM_IC_Start_IT+0x68>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e00b      	b.n	8001dc8 <HAL_TIM_IC_Start_IT+0x80>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d104      	bne.n	8001dc0 <HAL_TIM_IC_Start_IT+0x78>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e003      	b.n	8001dc8 <HAL_TIM_IC_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d102      	bne.n	8001dd6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0b8      	b.n	8001f4c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_IC_Start_IT+0xa2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de8:	e013      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0xca>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d104      	bne.n	8001dfa <HAL_TIM_IC_Start_IT+0xb2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001df8:	e00b      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0xca>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d104      	bne.n	8001e0a <HAL_TIM_IC_Start_IT+0xc2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e08:	e003      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0xca>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_IC_Start_IT+0xda>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e20:	e013      	b.n	8001e4a <HAL_TIM_IC_Start_IT+0x102>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d104      	bne.n	8001e32 <HAL_TIM_IC_Start_IT+0xea>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e30:	e00b      	b.n	8001e4a <HAL_TIM_IC_Start_IT+0x102>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d104      	bne.n	8001e42 <HAL_TIM_IC_Start_IT+0xfa>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e40:	e003      	b.n	8001e4a <HAL_TIM_IC_Start_IT+0x102>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d841      	bhi.n	8001ed4 <HAL_TIM_IC_Start_IT+0x18c>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <HAL_TIM_IC_Start_IT+0x110>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001ed5 	.word	0x08001ed5
 8001e60:	08001ed5 	.word	0x08001ed5
 8001e64:	08001ed5 	.word	0x08001ed5
 8001e68:	08001e9f 	.word	0x08001e9f
 8001e6c:	08001ed5 	.word	0x08001ed5
 8001e70:	08001ed5 	.word	0x08001ed5
 8001e74:	08001ed5 	.word	0x08001ed5
 8001e78:	08001eb1 	.word	0x08001eb1
 8001e7c:	08001ed5 	.word	0x08001ed5
 8001e80:	08001ed5 	.word	0x08001ed5
 8001e84:	08001ed5 	.word	0x08001ed5
 8001e88:	08001ec3 	.word	0x08001ec3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0202 	orr.w	r2, r2, #2
 8001e9a:	60da      	str	r2, [r3, #12]
      break;
 8001e9c:	e01d      	b.n	8001eda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	60da      	str	r2, [r3, #12]
      break;
 8001eae:	e014      	b.n	8001eda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	60da      	str	r2, [r3, #12]
      break;
 8001ec0:	e00b      	b.n	8001eda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0210 	orr.w	r2, r2, #16
 8001ed0:	60da      	str	r2, [r3, #12]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d134      	bne.n	8001f4a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	6839      	ldr	r1, [r7, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fdf2 	bl	8002ad2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_TIM_IC_Start_IT+0x20c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_TIM_IC_Start_IT+0x1ce>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f00:	d009      	beq.n	8001f16 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <HAL_TIM_IC_Start_IT+0x210>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <HAL_TIM_IC_Start_IT+0x214>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d010      	beq.n	8001f4a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f38:	e007      	b.n	8001f4a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0202 	mvn.w	r2, #2
 8001f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fb82 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa6f 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa75 	bl	80024a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d020      	beq.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fb5c 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa49 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa4f 	bl	80024a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01b      	beq.n	800205c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0208 	mvn.w	r2, #8
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fb36 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa23 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fa29 	bl	80024a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0210 	mvn.w	r2, #16
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2208      	movs	r2, #8
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fb10 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9fd 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fa03 	bl	80024a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0201 	mvn.w	r2, #1
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9dc 	bl	8002484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fd7d 	bl	8002bea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9d3 	bl	80024ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fd50 	bl	8002bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_TIM_IC_ConfigChannel+0x1e>
 800215a:	2302      	movs	r3, #2
 800215c:	e088      	b.n	8002270 <HAL_TIM_IC_ConfigChannel+0x130>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800217c:	f000 fb9c 	bl	80028b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020c 	bic.w	r2, r2, #12
 800218e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6999      	ldr	r1, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
 80021a2:	e060      	b.n	8002266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d11c      	bne.n	80021e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80021ba:	f000 fbd7 	bl	800296c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80021cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6999      	ldr	r1, [r3, #24]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	021a      	lsls	r2, r3, #8
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	619a      	str	r2, [r3, #24]
 80021e2:	e040      	b.n	8002266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11b      	bne.n	8002222 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80021fa:	f000 fbf3 	bl	80029e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 020c 	bic.w	r2, r2, #12
 800220c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69d9      	ldr	r1, [r3, #28]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
 8002220:	e021      	b.n	8002266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d11c      	bne.n	8002262 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002238:	f000 fc0f 	bl	8002a5a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800224a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69d9      	ldr	r1, [r3, #28]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	61da      	str	r2, [r3, #28]
 8002260:	e001      	b.n	8002266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002292:	2302      	movs	r3, #2
 8002294:	e0ae      	b.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f200 809f 	bhi.w	80023e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022e1 	.word	0x080022e1
 80022b0:	080023e5 	.word	0x080023e5
 80022b4:	080023e5 	.word	0x080023e5
 80022b8:	080023e5 	.word	0x080023e5
 80022bc:	08002321 	.word	0x08002321
 80022c0:	080023e5 	.word	0x080023e5
 80022c4:	080023e5 	.word	0x080023e5
 80022c8:	080023e5 	.word	0x080023e5
 80022cc:	08002363 	.word	0x08002363
 80022d0:	080023e5 	.word	0x080023e5
 80022d4:	080023e5 	.word	0x080023e5
 80022d8:	080023e5 	.word	0x080023e5
 80022dc:	080023a3 	.word	0x080023a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f95e 	bl	80025a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0204 	bic.w	r2, r2, #4
 800230a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6999      	ldr	r1, [r3, #24]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	619a      	str	r2, [r3, #24]
      break;
 800231e:	e064      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f9a4 	bl	8002674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6999      	ldr	r1, [r3, #24]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	619a      	str	r2, [r3, #24]
      break;
 8002360:	e043      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f9ed 	bl	8002748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0204 	bic.w	r2, r2, #4
 800238c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69d9      	ldr	r1, [r3, #28]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
      break;
 80023a0:	e023      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa37 	bl	800281c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69d9      	ldr	r1, [r3, #28]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	61da      	str	r2, [r3, #28]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	75fb      	strb	r3, [r7, #23]
      break;
 80023e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d831      	bhi.n	8002474 <HAL_TIM_ReadCapturedValue+0x78>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	0800244d 	.word	0x0800244d
 800241c:	08002475 	.word	0x08002475
 8002420:	08002475 	.word	0x08002475
 8002424:	08002475 	.word	0x08002475
 8002428:	08002457 	.word	0x08002457
 800242c:	08002475 	.word	0x08002475
 8002430:	08002475 	.word	0x08002475
 8002434:	08002475 	.word	0x08002475
 8002438:	08002461 	.word	0x08002461
 800243c:	08002475 	.word	0x08002475
 8002440:	08002475 	.word	0x08002475
 8002444:	08002475 	.word	0x08002475
 8002448:	0800246b 	.word	0x0800246b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002452:	60fb      	str	r3, [r7, #12]

      break;
 8002454:	e00f      	b.n	8002476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	60fb      	str	r3, [r7, #12]

      break;
 800245e:	e00a      	b.n	8002476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	60fb      	str	r3, [r7, #12]

      break;
 8002468:	e005      	b.n	8002476 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	60fb      	str	r3, [r7, #12]

      break;
 8002472:	e000      	b.n	8002476 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002474:	bf00      	nop
  }

  return tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <TIM_Base_SetConfig+0xd0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ea:	d007      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a2c      	ldr	r2, [pc, #176]	@ (80025a0 <TIM_Base_SetConfig+0xd4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a2b      	ldr	r2, [pc, #172]	@ (80025a4 <TIM_Base_SetConfig+0xd8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a22      	ldr	r2, [pc, #136]	@ (800259c <TIM_Base_SetConfig+0xd0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00b      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1f      	ldr	r2, [pc, #124]	@ (80025a0 <TIM_Base_SetConfig+0xd4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <TIM_Base_SetConfig+0xd8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <TIM_Base_SetConfig+0xd0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d103      	bne.n	8002574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]
  }
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40000800 	.word	0x40000800

080025a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f023 0201 	bic.w	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 0302 	bic.w	r3, r3, #2
 80025f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002670 <TIM_OC1_SetConfig+0xc8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d10c      	bne.n	800261e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0308 	bic.w	r3, r3, #8
 800260a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <TIM_OC1_SetConfig+0xc8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40012c00 	.word	0x40012c00

08002674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 0210 	bic.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0320 	bic.w	r3, r3, #32
 80026be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <TIM_OC2_SetConfig+0xd0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10d      	bne.n	80026f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <TIM_OC2_SetConfig+0xd0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d113      	bne.n	8002720 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00

08002748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <TIM_OC3_SetConfig+0xd0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <TIM_OC3_SetConfig+0xd0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d113      	bne.n	80027f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	621a      	str	r2, [r3, #32]
}
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40012c00 	.word	0x40012c00

0800281c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0f      	ldr	r2, [pc, #60]	@ (80028b4 <TIM_OC4_SetConfig+0x98>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d109      	bne.n	8002890 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00

080028b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0201 	bic.w	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <TIM_TI1_SetConfig+0xa8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00b      	beq.n	80028fe <TIM_TI1_SetConfig+0x46>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d007      	beq.n	80028fe <TIM_TI1_SetConfig+0x46>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <TIM_TI1_SetConfig+0xac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <TIM_TI1_SetConfig+0x46>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <TIM_TI1_SetConfig+0xb0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <TIM_TI1_SetConfig+0x4a>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <TIM_TI1_SetConfig+0x4c>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e003      	b.n	8002922 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	b2db      	uxtb	r3, r3
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f023 030a 	bic.w	r3, r3, #10
 800293c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 030a 	and.w	r3, r3, #10
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800

0800296c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 0210 	bic.w	r2, r3, #16
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	031b      	lsls	r3, r3, #12
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 0303 	bic.w	r3, r3, #3
 8002a10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	031b      	lsls	r3, r3, #12
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	031b      	lsls	r3, r3, #12
 8002ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	401a      	ands	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e046      	b.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b80:	d009      	beq.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a10      	ldr	r2, [pc, #64]	@ (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10c      	bne.n	8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800

08002bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e042      	b.n	8002c94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fe9c 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	@ 0x24
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fc7f 	bl	8003544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_UART_IRQHandler+0x66>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fb63 	bl	80033c6 <UART_Receive_IT>
      return;
 8002d00:	e25b      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80de 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x22c>
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d106      	bne.n	8002d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80d1 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_UART_IRQHandler+0xae>
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_UART_IRQHandler+0xd2>
 8002d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f043 0202 	orr.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0xf6>
 8002d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d011      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x126>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	f043 0208 	orr.w	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 81f2 	beq.w	80031b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_UART_IRQHandler+0x14e>
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 faee 	bl	80033c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_UART_IRQHandler+0x17a>
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04f      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9f8 	bl	800320c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d041      	beq.n	8002eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3314      	adds	r3, #20
 8002e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1d9      	bne.n	8002e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	4a7e      	ldr	r2, [pc, #504]	@ (800307c <HAL_UART_IRQHandler+0x3e0>)
 8002e84:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fff6 	bl	8000e7c <HAL_DMA_Abort_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00e      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f99c 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e00a      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f998 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e006      	b.n	8002ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f994 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ec2:	e175      	b.n	80031b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	bf00      	nop
    return;
 8002ec6:	e173      	b.n	80031b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f040 814f 	bne.w	8003170 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8148 	beq.w	8003170 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8141 	beq.w	8003170 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b6 	beq.w	8003080 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8145 	beq.w	80031b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f32:	429a      	cmp	r2, r3
 8002f34:	f080 813e 	bcs.w	80031b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f000 8088 	beq.w	800305c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f78:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1d9      	bne.n	8002f4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fbc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e1      	bne.n	8002f98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ff8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ffe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e3      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800302c:	f023 0310 	bic.w	r3, r3, #16
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800303e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003040:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800304c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e3      	bne.n	800301a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fed5 	bl	8000e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800306a:	b29b      	uxth	r3, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8bf 	bl	80031f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003078:	e09c      	b.n	80031b4 <HAL_UART_IRQHandler+0x518>
 800307a:	bf00      	nop
 800307c:	080032d1 	.word	0x080032d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003088:	b29b      	uxth	r3, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808e 	beq.w	80031b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800309c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8089 	beq.w	80031b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80030cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e3      	bne.n	80030a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	623b      	str	r3, [r7, #32]
   return(result);
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003102:	633a      	str	r2, [r7, #48]	@ 0x30
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e3      	bne.n	80030de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	60fb      	str	r3, [r7, #12]
   return(result);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0310 	bic.w	r3, r3, #16
 800313a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	617b      	str	r3, [r7, #20]
   return(result);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e3      	bne.n	8003124 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003166:	4619      	mov	r1, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f844 	bl	80031f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800316e:	e023      	b.n	80031b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_UART_IRQHandler+0x4f4>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8b5 	bl	80032f8 <UART_Transmit_IT>
    return;
 800318e:	e014      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00e      	beq.n	80031ba <HAL_UART_IRQHandler+0x51e>
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8f4 	bl	8003396 <UART_EndTransmit_IT>
    return;
 80031ae:	e004      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
    return;
 80031b0:	bf00      	nop
 80031b2:	e002      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
      return;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_UART_IRQHandler+0x51e>
      return;
 80031b8:	bf00      	nop
  }
}
 80031ba:	37e8      	adds	r7, #232	@ 0xe8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b095      	sub	sp, #84	@ 0x54
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003234:	643a      	str	r2, [r7, #64]	@ 0x40
 8003236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800323a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e5      	bne.n	8003214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	61fb      	str	r3, [r7, #28]
   return(result);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003268:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003270:	e841 2300 	strex	r3, r2, [r1]
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	2b01      	cmp	r3, #1
 8003282:	d119      	bne.n	80032b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	60bb      	str	r3, [r7, #8]
   return(result);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f023 0310 	bic.w	r3, r3, #16
 800329a:	647b      	str	r3, [r7, #68]	@ 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a4:	61ba      	str	r2, [r7, #24]
 80032a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	6979      	ldr	r1, [r7, #20]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	613b      	str	r3, [r7, #16]
   return(result);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032c6:	bf00      	nop
 80032c8:	3754      	adds	r7, #84	@ 0x54
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff ff7a 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b21      	cmp	r3, #33	@ 0x21
 800330a:	d13e      	bne.n	800338a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003314:	d114      	bne.n	8003340 <UART_Transmit_IT+0x48>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d110      	bne.n	8003340 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003332:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]
 800333e:	e008      	b.n	8003352 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	1c59      	adds	r1, r3, #1
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6211      	str	r1, [r2, #32]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff02 	bl	80031c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08c      	sub	sp, #48	@ 0x30
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b22      	cmp	r3, #34	@ 0x22
 80033d8:	f040 80ae 	bne.w	8003538 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e4:	d117      	bne.n	8003416 <UART_Receive_IT+0x50>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d113      	bne.n	8003416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	b29a      	uxth	r2, r3
 8003406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	1c9a      	adds	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
 8003414:	e026      	b.n	8003464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003428:	d007      	beq.n	800343a <UART_Receive_IT+0x74>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <UART_Receive_IT+0x82>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e008      	b.n	800345a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003454:	b2da      	uxtb	r2, r3
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29b      	uxth	r3, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4619      	mov	r1, r3
 8003472:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003474:	2b00      	cmp	r3, #0
 8003476:	d15d      	bne.n	8003534 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0220 	bic.w	r2, r2, #32
 8003486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d135      	bne.n	800352a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	613b      	str	r3, [r7, #16]
   return(result);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e4:	623a      	str	r2, [r7, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69f9      	ldr	r1, [r7, #28]
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d10a      	bne.n	800351c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fe67 	bl	80031f6 <HAL_UARTEx_RxEventCallback>
 8003528:	e002      	b.n	8003530 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fe51 	bl	80031d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e002      	b.n	800353a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3730      	adds	r7, #48	@ 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800357e:	f023 030c 	bic.w	r3, r3, #12
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	430b      	orrs	r3, r1
 800358a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <UART_SetConfig+0x114>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fa58 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	e002      	b.n	80035ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035b4:	f7fe fa40 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80035b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	4a22      	ldr	r2, [pc, #136]	@ (800365c <UART_SetConfig+0x118>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	0119      	lsls	r1, r3, #4
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <UART_SetConfig+0x118>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2064      	movs	r0, #100	@ 0x64
 80035fa:	fb00 f303 	mul.w	r3, r0, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	@ 0x32
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <UART_SetConfig+0x118>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003610:	4419      	add	r1, r3
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fbb2 f2f3 	udiv	r2, r2, r3
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <UART_SetConfig+0x118>)
 800362a:	fba3 0302 	umull	r0, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2064      	movs	r0, #100	@ 0x64
 8003632:	fb00 f303 	mul.w	r3, r0, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	@ 0x32
 800363c:	4a07      	ldr	r2, [pc, #28]	@ (800365c <UART_SetConfig+0x118>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	440a      	add	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40013800 	.word	0x40013800
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <memset>:
 8003660:	4603      	mov	r3, r0
 8003662:	4402      	add	r2, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <__libc_init_array>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	2600      	movs	r6, #0
 8003674:	4d0c      	ldr	r5, [pc, #48]	@ (80036a8 <__libc_init_array+0x38>)
 8003676:	4c0d      	ldr	r4, [pc, #52]	@ (80036ac <__libc_init_array+0x3c>)
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	42a6      	cmp	r6, r4
 800367e:	d109      	bne.n	8003694 <__libc_init_array+0x24>
 8003680:	f000 f81a 	bl	80036b8 <_init>
 8003684:	2600      	movs	r6, #0
 8003686:	4d0a      	ldr	r5, [pc, #40]	@ (80036b0 <__libc_init_array+0x40>)
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <__libc_init_array+0x44>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	42a6      	cmp	r6, r4
 8003690:	d105      	bne.n	800369e <__libc_init_array+0x2e>
 8003692:	bd70      	pop	{r4, r5, r6, pc}
 8003694:	f855 3b04 	ldr.w	r3, [r5], #4
 8003698:	4798      	blx	r3
 800369a:	3601      	adds	r6, #1
 800369c:	e7ee      	b.n	800367c <__libc_init_array+0xc>
 800369e:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a2:	4798      	blx	r3
 80036a4:	3601      	adds	r6, #1
 80036a6:	e7f2      	b.n	800368e <__libc_init_array+0x1e>
 80036a8:	080036fc 	.word	0x080036fc
 80036ac:	080036fc 	.word	0x080036fc
 80036b0:	080036fc 	.word	0x080036fc
 80036b4:	08003700 	.word	0x08003700

080036b8 <_init>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr

080036c4 <_fini>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr
